package learnGraph;
import java.math.BigDecimal;

/**
 * 加权无向图的数据结构及权重边的数据结构
 * 主要关注其最小生成树
 * 本数据结构只考虑最简单情况，详情见《算法》390页
 */
import learnGraph.*;
public class EdgeWeightedGraph {
	private Bag<Edge>[] adj;
	private int V;
	private int E;
	
	
	public EdgeWeightedGraph(int v) {
		super();
		V = v;
		E = 0;
		this.adj = (Bag<Edge>[]) new Bag[v];
		for(int i=0;i<v;i++) {
			adj[i] = new Bag<Edge>();
		}
		
	}
	
	public int V() {
		return V;
	}
	public int E() {
		return E;
	}
	public void addEdge(Edge e) {
		int v = e.either();
		int w = e.other(v);
		adj[v].put(e);
		adj[w].put(e);
		E++;
	}
	public Iterable<Edge> iterator(int v){
		return adj[v];
	}
	public String toString() {
		StringBuilder out = new StringBuilder();
		out.append(V+"个顶点"+E+"条边\n");
		for(int i=0;i<V;i++){
			out.append("顶点"+i+"邻接边:\t");
				out.append(adj[i].toString());
			out.append('\n');
		}
		return out.toString();	
	}

	
	public static void main(String[] args) {
		EdgeWeightedGraph g =new EdgeWeightedGraph(8);
		int[][] graph = new int[][] {
			{0,7},{2,3},{1,7},{0,2},{5,7},{1,3},{1,5},{2,7},{4,5},{1,2},{4,7},{0,4},{6,2},
			{3,6},{6,0},{6,4},
		};
		for(int[] t1:graph)
			g.addEdge(t1[0], t1[1]);
		System.out.print(g.toString());
//		DepthFirstSearch dfs =new DepthFirstSearch(g, 0);
//		System.out.print(dfs.count()+"*****"+dfs.marked(10));
		System.out.print(new KosarajuSCC(g).count());
	
	}

}

class Edge implements Comparable<Edge>{
	private final int  v;
	private final int  w;
	private final double  weight;
	
	
	public Edge(int v, int w, double weight) {
		super();
		this.v = v;
		this.w = w;
		this.weight = weight;
	}

	
	public int either() {
		return v;
	}


	public int other(int in) {
		if(in==v) return w;
		if(in==w) return v;
		throw new RuntimeException("该点不在边中");
	}


	public double getWeight() {
		return weight;
	}


	@Override
	public int compareTo(Edge o) {
		return BigDecimal.valueOf(getWeight()).compareTo(BigDecimal.valueOf(o.getWeight()));
	}


	@Override
	public String toString() {
		return this.v+"<-"+this.weight+"->"+this.w;
	}
}
