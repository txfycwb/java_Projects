package learnString;
import edu.princeton.cs.algs4.*;

/**
 * 首先根据所需要使用的字符构成字母表，使用字符索引数组：这样表示字符串时只需要使用索引，对于小字母表，效率更高。
 * 但一般使用String：更通用，更易解。
 * @author guo
 *
 */
public class StringSort {

	public static void main(String[] args) {
		

	}

}
/**
 * LSD,低位优先，最适合键长相等的字符串排序应用。
 * 是稳定的字符排序（依赖于索引计数法是稳定的），适合于小字母表
 * 访问7WN+3WR次数组，空间N+R
 */
class LSD{
	public static void sort(String[] a, int w) {
		//比较字符串的最小的w位排序
		int R = 256;//基数，也叫字母表大小
		int N = a.length;
		String[] aux = new String[N];
		for(int i=N-1;i>=N-w;i--) {
			int count[] = new int[R+1];
			//统计最低位字母表出现频率（字母表的设置就包含了排序规则：表头排前）
			for(String temp:a) {
				count[temp.charAt(i)+1]++;
			}
			//计算本轮排序，string对应位置
			for(int j=1;j<=R;j++)
				count[j] += count[j-1];
			//移动位置
			for(String temp:a) {
				aux[count[temp.charAt(i)]++] = temp;
			}
			//回写
			for(int j=0;j<N;j++) {
				a[j] = aux[j];
			}
		}
	}
}
/**
	MSD：高位优先排序。
	类似快速排序，切分为每个首字母得到一个子数组。
 */
class MSD{
	private static int R = 256;//基数
	private static final int M = 15;//切换为插入排序的阈值
	private static String[] aux;
	private static int charAt(String s,int d) {
		if(d>=s.length()) return -1;
		return s.charAt(d);
	}
	
	public void sort(String[] a) {
		int N = a.length;
		aux = new String[N];
		sort(a,0,N-1,0);
	}

	//每次比一组一位
	private void sort(String[] a, int lo, int hi, int d) {
		if(hi<=M+lo) {
			insertionSort(a,lo,hi,d);
			return;
		}
		int count[] = new int[R+2];//count[1]为长度为d的字符串数量，charAt返回-1，加2后保存在索引为1处
		//统计最低位字母表出现频率（字母表的设置就包含了排序规则：表头排前）
		for(int i = lo;i<=hi;i++) {
			count[charAt(a[i],d)+2]++;
		}
		//计算本轮排序，string对应位置
		for(int j=1;j<=R+1;j++)
			count[j] += count[j-1];
		//移动位置
		for(int i = lo;i<=hi;i++) {
			aux[count[charAt(a[i], d)+1]++] = a[i];
		}
		//回写
		for(int i = lo;i<=hi;i++) {
			a[i] = aux[i-lo];
		}
		//分别递归每个子数组
		for(int nextD = d;nextD<d;)
	}

	private void insertionSort(String[] a, int lo, int hi, int d) {
		
	}
}