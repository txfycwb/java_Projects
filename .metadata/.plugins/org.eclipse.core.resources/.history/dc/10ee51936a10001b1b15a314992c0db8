package learnGraph;
/**
 * prime算法的延迟实现、即时实现
 * @author guo
 *
 */
import java.util.*;


import learnGraph.*;
public class LazyPrimeMST {
	private boolean[] marked;
	private PriorityQueue<Edge> pq;
	private LinkedList<Edge> mst;
	public LazyPrimeMST(EdgeWeightedGraph g) {
		super();
		this.marked = new boolean[g.V()];
		this.pq = new PriorityQueue<>();
		this.mst = new LinkedList<>();
		//默认是连通图
		visit(0, g);
		while(!pq.isEmpty()) {
			Edge min = pq.remove();
			int v = min.either();int w = min.other(v);
			if(marked[v]&&marked[w]) continue;
			mst.add(min);
			if(marked[v]) {
				visit(w, g);
			}else {
				visit(v, g);
			}
		}
	}
	
	private void visit(int v, EdgeWeightedGraph g) {
		marked[v] = true;
		for(Edge e:g.iterator(v)) {
			if(!marked[e.other(v)])
				pq.add(e);
		}
	}
	
}
